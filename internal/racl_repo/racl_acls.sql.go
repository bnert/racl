// Code generated by sqlc. DO NOT EDIT.
// source: racl_acls.sql

package racl_repo

import (
	"context"

	"github.com/google/uuid"
)

const createAcl = `-- name: CreateAcl :one
INSERT INTO racl_acls (
  resource_id, entity, capabilities
) VALUES (
  $1, $2, $3
) RETURNING id, created_at, updated_at, resource_id, entity, capabilities
`

type CreateAclParams struct {
	ResourceID   string   `json:"resourceID"`
	Entity       string   `json:"entity"`
	Capabilities []string `json:"capabilities"`
}

func (q *Queries) CreateAcl(ctx context.Context, arg CreateAclParams) (RaclAcl, error) {
	row := q.db.QueryRow(ctx, createAcl, arg.ResourceID, arg.Entity, arg.Capabilities)
	var i RaclAcl
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResourceID,
		&i.Entity,
		&i.Capabilities,
	)
	return i, err
}

const createDefaultAcl = `-- name: CreateDefaultAcl :one
INSERT INTO racl_acls (
  resource_id, entity, capabilities
) VALUES (
  $1, $2, '{"c", "r", "u", "d", "a"}'
) RETURNING id, created_at, updated_at, resource_id, entity, capabilities
`

type CreateDefaultAclParams struct {
	ResourceID string `json:"resourceID"`
	Entity     string `json:"entity"`
}

func (q *Queries) CreateDefaultAcl(ctx context.Context, arg CreateDefaultAclParams) (RaclAcl, error) {
	row := q.db.QueryRow(ctx, createDefaultAcl, arg.ResourceID, arg.Entity)
	var i RaclAcl
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResourceID,
		&i.Entity,
		&i.Capabilities,
	)
	return i, err
}

const deleteAcl = `-- name: DeleteAcl :one
DELETE FROM racl_acls
WHERE id = $1
RETURNING id, created_at, updated_at, resource_id, entity, capabilities
`

func (q *Queries) DeleteAcl(ctx context.Context, id uuid.UUID) (RaclAcl, error) {
	row := q.db.QueryRow(ctx, deleteAcl, id)
	var i RaclAcl
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResourceID,
		&i.Entity,
		&i.Capabilities,
	)
	return i, err
}

const updateAclCapabilities = `-- name: UpdateAclCapabilities :one
UPDATE racl_acls
SET capabilities = $2
WHERE id = $1
RETURNING id, created_at, updated_at, resource_id, entity, capabilities
`

type UpdateAclCapabilitiesParams struct {
	ID           uuid.UUID `json:"id"`
	Capabilities []string  `json:"capabilities"`
}

func (q *Queries) UpdateAclCapabilities(ctx context.Context, arg UpdateAclCapabilitiesParams) (RaclAcl, error) {
	row := q.db.QueryRow(ctx, updateAclCapabilities, arg.ID, arg.Capabilities)
	var i RaclAcl
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResourceID,
		&i.Entity,
		&i.Capabilities,
	)
	return i, err
}
