// Code generated by sqlc. DO NOT EDIT.
// source: racl_acls.sql

package racl_repo

import (
	"context"
)

const createAcl = `-- name: CreateAcl :one
insert into racl_acls (
  resource_id, entity, capabilities
) values (
  $1, $2, $3
) returning id, created_at, updated_at, resource_id, entity, capabilities
`

type CreateAclParams struct {
	ResourceID   string   `json:"resourceID"`
	Entity       string   `json:"entity"`
	Capabilities []string `json:"capabilities"`
}

func (q *Queries) CreateAcl(ctx context.Context, arg CreateAclParams) (RaclAcl, error) {
	row := q.db.QueryRow(ctx, createAcl, arg.ResourceID, arg.Entity, arg.Capabilities)
	var i RaclAcl
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResourceID,
		&i.Entity,
		&i.Capabilities,
	)
	return i, err
}

const createDefaultAcl = `-- name: CreateDefaultAcl :one
insert into racl_acls (
  resource_id, entity, capabilities
) values (
  $1, $2, '{"c", "r", "u", "d", "a"}'
) returning id, created_at, updated_at, resource_id, entity, capabilities
`

type CreateDefaultAclParams struct {
	ResourceID string `json:"resourceID"`
	Entity     string `json:"entity"`
}

func (q *Queries) CreateDefaultAcl(ctx context.Context, arg CreateDefaultAclParams) (RaclAcl, error) {
	row := q.db.QueryRow(ctx, createDefaultAcl, arg.ResourceID, arg.Entity)
	var i RaclAcl
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResourceID,
		&i.Entity,
		&i.Capabilities,
	)
	return i, err
}

const deleteAcl = `-- name: DeleteAcl :one
delete from racl_acls
where
  entity = $1
  and resource_id = $2
returning id, created_at, updated_at, resource_id, entity, capabilities
`

type DeleteAclParams struct {
	Entity     string `json:"entity"`
	ResourceID string `json:"resourceID"`
}

func (q *Queries) DeleteAcl(ctx context.Context, arg DeleteAclParams) (RaclAcl, error) {
	row := q.db.QueryRow(ctx, deleteAcl, arg.Entity, arg.ResourceID)
	var i RaclAcl
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResourceID,
		&i.Entity,
		&i.Capabilities,
	)
	return i, err
}

const getAclByEntity = `-- name: GetAclByEntity :one
select
  id, created_at, updated_at, resource_id, entity, capabilities
from
  racl_acls
where
  entity = $1
`

func (q *Queries) GetAclByEntity(ctx context.Context, entity string) (RaclAcl, error) {
	row := q.db.QueryRow(ctx, getAclByEntity, entity)
	var i RaclAcl
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResourceID,
		&i.Entity,
		&i.Capabilities,
	)
	return i, err
}

const getAclByEntityAndResource = `-- name: GetAclByEntityAndResource :one
select
  id, created_at, updated_at, resource_id, entity, capabilities
from
  racl_acls
where
  entity = $1
  and resource_id = $2
`

type GetAclByEntityAndResourceParams struct {
	Entity     string `json:"entity"`
	ResourceID string `json:"resourceID"`
}

func (q *Queries) GetAclByEntityAndResource(ctx context.Context, arg GetAclByEntityAndResourceParams) (RaclAcl, error) {
	row := q.db.QueryRow(ctx, getAclByEntityAndResource, arg.Entity, arg.ResourceID)
	var i RaclAcl
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResourceID,
		&i.Entity,
		&i.Capabilities,
	)
	return i, err
}

const updateAclCapabilities = `-- name: UpdateAclCapabilities :one
update
  racl_acls
set
  capabilities = $3
where
  entity = $1
  and resource_id = $2
returning id, created_at, updated_at, resource_id, entity, capabilities
`

type UpdateAclCapabilitiesParams struct {
	Entity       string   `json:"entity"`
	ResourceID   string   `json:"resourceID"`
	Capabilities []string `json:"capabilities"`
}

func (q *Queries) UpdateAclCapabilities(ctx context.Context, arg UpdateAclCapabilitiesParams) (RaclAcl, error) {
	row := q.db.QueryRow(ctx, updateAclCapabilities, arg.Entity, arg.ResourceID, arg.Capabilities)
	var i RaclAcl
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResourceID,
		&i.Entity,
		&i.Capabilities,
	)
	return i, err
}
